package main

import (
	"encoding/json"
	"fmt"
	"trickSnippet/base"
)

// func main() {
// 	// base.RangeCopy()
// 	fmt.Printf("deferDemo.Demo1(): %v\n", deferDemo.Demo1())
//
// }

type AutoGenerated struct {
	Age   int    `json:"age"`
	Name  string `json:"name"`
	Child []int  `json:"child"`
}

func main() {

	jsonStr1 := `{"age": 14,"name": "potter", "child":[1,2,3]}`
	a := AutoGenerated{}
	json.Unmarshal([]byte(jsonStr1), &a)
	aAge := a.Age
	aChild := a.Child
	fmt.Printf("aChild=%v\n", aChild)
	fmt.Printf("aChild pointer=%v\n", &aChild)
	fmt.Printf("aAge=%v\n", aAge)
	fmt.Printf("aAge pointer = %v\n", &aAge)
	jsonStr2 := `{"age": 12,"name": "potter", "child":[3,4,5,7,8,9]}`
	json.Unmarshal([]byte(jsonStr2), &a)
	fmt.Println("_____________________")
	fmt.Printf("aChild=%v\n", aChild)
	fmt.Printf("aChild pointer=%v\n", &aChild)
	fmt.Printf("aAge=%v\n", aAge)
	fmt.Printf("aAge pointer = %v\n", &aAge)

	base.UnsafePointer()

	fmt.Println(f1())
	fmt.Println(f2())
	fmt.Println(f3())
}

func f1() (r int) {
	defer func() {
		r++
	}()
	return 0

}
func f2() (r int) {
	t := 5
	defer func() {
		t += 5
	}()
	return t

}
func f3() (r int) {
	defer func(r int) {
		r = r + 5
	}(r)
	return 1
}
